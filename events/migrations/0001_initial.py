# Generated by Django 3.0.6 on 2020-05-10 22:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('policies', '0001_initial'),
        ('clubs', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Award Name')),
                ('description', models.TextField(verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('T', 'Championship'), ('B', 'Banquet'), ('M', 'Meeting'), ('C', 'Canceled'), ('P', 'Postponed')], default='T', max_length=1, verbose_name='Event type')),
                ('name', models.CharField(max_length=100, verbose_name='Event title')),
                ('description', models.TextField(verbose_name='Format and rules')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Additional notes')),
                ('start_date', models.DateField(verbose_name='Start date')),
                ('rounds', models.IntegerField(default=1, verbose_name='Number of rounds')),
                ('registration_start', models.DateTimeField(blank=True, null=True, verbose_name='Registration start')),
                ('early_registration_end', models.DateTimeField(blank=True, null=True, verbose_name='Early registration end')),
                ('registration_end', models.DateTimeField(blank=True, null=True, verbose_name='Registration end')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='clubs.GolfCourse', verbose_name='Location')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'ordering': ['start_date'],
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Tournament Name')),
                ('system_name', models.CharField(blank=True, max_length=20, null=True, verbose_name='System name')),
                ('description', models.TextField(verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Tournament',
                'verbose_name_plural': 'Tournaments',
            },
        ),
        migrations.CreateModel(
            name='TournamentWinner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(verbose_name='Year')),
                ('location', models.CharField(max_length=100, verbose_name='Location')),
                ('winner', models.CharField(max_length=100, verbose_name='Winner')),
                ('winner_club', models.CharField(blank=True, max_length=100, verbose_name='Club')),
                ('co_winner', models.CharField(blank=True, max_length=100, verbose_name='Winner (Opponent for Match Play)')),
                ('co_winner_club', models.CharField(blank=True, max_length=100, verbose_name='Club')),
                ('flight_or_division', models.CharField(max_length=20, verbose_name='Flight or Division')),
                ('score', models.CharField(blank=True, max_length=20, verbose_name='Score')),
                ('is_net', models.BooleanField(default=False, verbose_name='Score is a Net Score')),
                ('is_match', models.BooleanField(default=False, verbose_name='Match Play')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='winners', to='events.Tournament', verbose_name='Tournament')),
            ],
            options={
                'verbose_name': 'Tournament Winner',
                'verbose_name_plural': 'Tournament Winners',
                'ordering': ['-year'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalEvent',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('T', 'Championship'), ('B', 'Banquet'), ('M', 'Meeting'), ('C', 'Canceled'), ('P', 'Postponed')], default='T', max_length=1, verbose_name='Event type')),
                ('name', models.CharField(max_length=100, verbose_name='Event title')),
                ('description', models.TextField(verbose_name='Format and rules')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Additional notes')),
                ('start_date', models.DateField(verbose_name='Start date')),
                ('rounds', models.IntegerField(default=1, verbose_name='Number of rounds')),
                ('registration_start', models.DateTimeField(blank=True, null=True, verbose_name='Registration start')),
                ('early_registration_end', models.DateTimeField(blank=True, null=True, verbose_name='Early registration end')),
                ('registration_end', models.DateTimeField(blank=True, null=True, verbose_name='Registration end')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='clubs.GolfCourse', verbose_name='Location')),
                ('tournament', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='events.Tournament', verbose_name='Championship')),
            ],
            options={
                'verbose_name': 'historical Event',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='EventPolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(verbose_name='Display order')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='policies', to='events.Event', verbose_name='Event')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='policy_to_event', to='policies.Policy', verbose_name='Policy')),
            ],
        ),
        migrations.CreateModel(
            name='EventPoints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place', models.IntegerField(verbose_name='Place')),
                ('points', models.IntegerField(verbose_name='Points')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_points', to='events.Event', verbose_name='Event')),
            ],
        ),
        migrations.CreateModel(
            name='EventLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link_type', models.CharField(choices=[('Results', 'Results'), ('Tee Times', 'Tee Times'), ('Registration', 'Registration'), ('Media', 'Media')], max_length=40, verbose_name='Link Type')),
                ('title', models.CharField(default='TM Portal', max_length=60, verbose_name='Title')),
                ('url', models.CharField(max_length=240, verbose_name='Full Url')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='events.Event', verbose_name='Event')),
            ],
        ),
        migrations.CreateModel(
            name='EventChair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chair', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='clubs.Contact', verbose_name='Contact')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chairs', to='events.Event', verbose_name='Event')),
            ],
        ),
        migrations.AddField(
            model_name='event',
            name='tournament',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='events.Tournament', verbose_name='Championship'),
        ),
        migrations.CreateModel(
            name='AwardWinner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(verbose_name='Year')),
                ('winner', models.CharField(max_length=100, verbose_name='Award Winner')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('award', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='winners', to='events.Award', verbose_name='Award')),
            ],
            options={
                'ordering': ['-year'],
            },
        ),
    ]
