# Generated by Django 2.1.2 on 2018-10-04 15:51

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('policies', '__first__'),
        ('clubs', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('T', 'Tournament'), ('B', 'Banquet'), ('M', 'Meeting')], default='T', max_length=1, verbose_name='Event type')),
                ('name', models.CharField(max_length=100, verbose_name='Event title')),
                ('description', models.TextField(verbose_name='Format and rules')),
                ('event_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, verbose_name='Event fee')),
                ('alt_event_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, verbose_name='Alternative event fee')),
                ('minimum_signup_group_size', models.IntegerField(default=1, verbose_name='Minimum registration group size')),
                ('maximum_signup_group_size', models.IntegerField(default=1, verbose_name='Maximum registration group size')),
                ('registration_type', models.CharField(choices=[('1', 'External'), ('2', 'Internal'), ('3', 'No Registration Required')], default='1', max_length=1, verbose_name='Registration type')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Event format and notes')),
                ('start_date', models.DateField(verbose_name='Start date')),
                ('rounds', models.IntegerField(default=1, verbose_name='Number of rounds')),
                ('registration_start', models.DateTimeField(blank=True, null=True, verbose_name='Registration start')),
                ('early_registration_end', models.DateTimeField(blank=True, null=True, verbose_name='Early registration end')),
                ('registration_end', models.DateTimeField(blank=True, null=True, verbose_name='Registration end')),
                ('registration_maximum', models.IntegerField(default=0, verbose_name='Registration maximum')),
                ('portal_url', models.CharField(blank=True, max_length=240, null=True, verbose_name='Golf Genius Portal')),
                ('registration_url', models.CharField(blank=True, max_length=240, null=True, verbose_name='Registration Portal')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='clubs.GolfCourse', verbose_name='Location')),
            ],
        ),
        migrations.CreateModel(
            name='EventChair',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chair', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='clubs.Contact', verbose_name='Contact')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.Event', verbose_name='Event')),
            ],
        ),
        migrations.CreateModel(
            name='EventPoints',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('place', models.IntegerField(verbose_name='Place')),
                ('points', models.IntegerField(verbose_name='Points')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.Event', verbose_name='Event')),
            ],
        ),
        migrations.CreateModel(
            name='EventPolicy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(verbose_name='Display order')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_to_policy', to='events.Event', verbose_name='Event')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='policy_to_event', to='policies.Policy', verbose_name='Policy')),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalEvent',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('T', 'Tournament'), ('B', 'Banquet'), ('M', 'Meeting')], default='T', max_length=1, verbose_name='Event type')),
                ('name', models.CharField(max_length=100, verbose_name='Event title')),
                ('description', models.TextField(verbose_name='Format and rules')),
                ('event_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, verbose_name='Event fee')),
                ('alt_event_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=5, verbose_name='Alternative event fee')),
                ('minimum_signup_group_size', models.IntegerField(default=1, verbose_name='Minimum registration group size')),
                ('maximum_signup_group_size', models.IntegerField(default=1, verbose_name='Maximum registration group size')),
                ('registration_type', models.CharField(choices=[('1', 'External'), ('2', 'Internal'), ('3', 'No Registration Required')], default='1', max_length=1, verbose_name='Registration type')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Event format and notes')),
                ('start_date', models.DateField(verbose_name='Start date')),
                ('rounds', models.IntegerField(default=1, verbose_name='Number of rounds')),
                ('registration_start', models.DateTimeField(blank=True, null=True, verbose_name='Registration start')),
                ('early_registration_end', models.DateTimeField(blank=True, null=True, verbose_name='Early registration end')),
                ('registration_end', models.DateTimeField(blank=True, null=True, verbose_name='Registration end')),
                ('registration_maximum', models.IntegerField(default=0, verbose_name='Registration maximum')),
                ('portal_url', models.CharField(blank=True, max_length=240, null=True, verbose_name='Golf Genius Portal')),
                ('registration_url', models.CharField(blank=True, max_length=240, null=True, verbose_name='Registration Portal')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='clubs.GolfCourse')),
            ],
            options={
                'verbose_name': 'historical event',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
