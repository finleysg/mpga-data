# Generated by Django 3.0.6 on 2020-05-10 22:53

import clubs.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Affiliate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(max_length=60, verbose_name='Organization')),
                ('website', models.CharField(max_length=240, verbose_name='Website')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
            ],
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Club Name')),
                ('system_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='System name')),
                ('website', models.CharField(blank=True, max_length=300, verbose_name='Website')),
                ('size', models.IntegerField(blank=True, null=True, verbose_name='Number of Members')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ClubContact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Primary Contact')),
                ('use_for_mailings', models.BooleanField(default=False, verbose_name='Use for Club Mailings')),
                ('notes', models.CharField(blank=True, max_length=150, null=True, verbose_name='Notes')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='club_contacts', to='clubs.Club', verbose_name='Club')),
            ],
            options={
                'ordering': ['contact__last_name', 'contact__first_name'],
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=30, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=30, verbose_name='Last Name')),
                ('primary_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Primary Phone')),
                ('alternate_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Alternate Phone')),
                ('email', models.CharField(blank=True, max_length=250, null=True, verbose_name='Email')),
                ('address_txt', models.CharField(blank=True, max_length=200, null=True, verbose_name='Street Address')),
                ('city', models.CharField(blank=True, max_length=40, null=True, verbose_name='City')),
                ('state', models.CharField(blank=True, choices=[('AL', 'Alabama'), ('AK', 'Alaska'), ('AZ', 'Arizona'), ('AR', 'Arkansas'), ('CA', 'California'), ('CO', 'Colorado'), ('CT', 'Connecticut'), ('DE', 'Delaware'), ('DC', 'District of Columbia'), ('FL', 'Florida'), ('GA', 'Georgia'), ('HI', 'Hawaii'), ('ID', 'Idaho'), ('IL', 'Illinois'), ('IN', 'Indiana'), ('IA', 'Iowa'), ('KS', 'Kansas'), ('KY', 'Kentucky'), ('LA', 'Louisiana'), ('ME', 'Maine'), ('MD', 'Maryland'), ('MA', 'Massachusetts'), ('MI', 'Michigan'), ('MN', 'Minnesota'), ('MS', 'Mississippi'), ('MO', 'Missouri'), ('MT', 'Montana'), ('NE', 'Nebraska'), ('NV', 'Nevada'), ('NH', 'New Hampshire'), ('NJ', 'New Jersey'), ('NM', 'New Mexico'), ('NY', 'New York'), ('NC', 'North Carolina'), ('ND', 'North Dakota'), ('OH', 'Ohio'), ('OK', 'Oklahoma'), ('OR', 'Oregon'), ('PA', 'Pennsylvania'), ('RI', 'Rhode Island'), ('SC', 'South Carolina'), ('SD', 'South Dakota'), ('TN', 'Tennessee'), ('TX', 'Texas'), ('UT', 'Utah'), ('VT', 'Vermont'), ('VA', 'Virginia'), ('WA', 'Washington'), ('WV', 'West Virginia'), ('WI', 'Wisconsin'), ('WY', 'Wyoming')], default='MN', max_length=2, null=True, verbose_name='State')),
                ('zip', models.CharField(blank=True, max_length=10, null=True, verbose_name='Zip Code')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('send_email', models.BooleanField(default=False, verbose_name='Send Email')),
                ('home_club', models.CharField(blank=True, max_length=200, null=True, verbose_name='Club Name')),
            ],
        ),
        migrations.CreateModel(
            name='GolfCourse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Golf Course Name')),
                ('address_txt', models.CharField(blank=True, max_length=200, verbose_name='Street Address')),
                ('city', models.CharField(blank=True, max_length=40, verbose_name='City')),
                ('state', models.CharField(blank=True, choices=[('IA', 'Iowa'), ('MN', 'Minnesota'), ('ND', 'North Dakota'), ('WI', 'Wisconsin')], default='MN', max_length=2, verbose_name='State')),
                ('zip', models.CharField(blank=True, max_length=10, verbose_name='Zip Code')),
                ('website', models.CharField(blank=True, max_length=300, verbose_name='Website')),
                ('email', models.CharField(blank=True, max_length=250, verbose_name='Email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Phone')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('logo', models.ImageField(upload_to=clubs.models.photo_directory_path, verbose_name='Logo')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(verbose_name='Golf Season')),
                ('group_name', models.CharField(max_length=20, verbose_name='Group')),
                ('is_senior', models.BooleanField(verbose_name='Senior')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='teams', to='clubs.Club', verbose_name='Club')),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.IntegerField(verbose_name='Golf Season')),
                ('payment_date', models.DateField(verbose_name='Payment Date')),
                ('payment_type', models.CharField(choices=[('CK', 'Check'), ('OL', 'Online'), ('CA', 'Cash')], default='CK', max_length=2, verbose_name='Payment Type')),
                ('payment_code', models.CharField(blank=True, max_length=100, verbose_name='Code or Number')),
                ('create_date', models.DateTimeField(auto_now_add=True, verbose_name='Date Recorded')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='memberships', to='clubs.Club', verbose_name='Club')),
            ],
            options={
                'ordering': ['-year', 'club__name'],
            },
        ),
        migrations.CreateModel(
            name='MatchPlayResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=20, verbose_name='Group')),
                ('match_date', models.DateField(verbose_name='Date Played')),
                ('home_team_score', models.DecimalField(decimal_places=1, max_digits=3, verbose_name='Home Team Score')),
                ('away_team_score', models.DecimalField(decimal_places=1, max_digits=3, verbose_name='Away Team Score')),
                ('entered_by', models.CharField(max_length=60, verbose_name='Entered By')),
                ('forfeit', models.BooleanField(verbose_name='Forfeit')),
                ('notes', models.CharField(blank=True, max_length=140, null=True, verbose_name='Notes')),
                ('away_team', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='away_team', to='clubs.Club', verbose_name='Away Team')),
                ('home_team', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='home_team', to='clubs.Club', verbose_name='Home Team')),
            ],
            options={
                'ordering': ['-match_date', 'group_name'],
            },
        ),
        migrations.CreateModel(
            name='Committee',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=40, verbose_name='Role')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='clubs.Contact', verbose_name='Contact')),
                ('home_club', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='clubs.Club', verbose_name='Home Club')),
            ],
            options={
                'verbose_name': 'Executive Committee',
                'verbose_name_plural': 'Executive Committee',
            },
        ),
        migrations.CreateModel(
            name='ClubContactRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('Director of Golf', 'Director of Golf'), ('Event Director', 'Event Director'), ('General Manager', 'General Manager'), ('Handicap Chair', 'Handicap Chair'), ('Manager', 'Manager'), ('Match Play Captain', 'Match Play Captain'), ("Men's Club Contact", "Men's Club Contact"), ("Men's Club President", "Men's Club President"), ("Men's Club Secretary", "Men's Club Secretary"), ("Men's Club Treasurer", "Men's Club Treasurer"), ('Owner', 'Owner'), ('PGA Professional', 'PGA Professional'), ('Sr. Match Play Captain', 'Sr. Match Play Captain'), ('Superintendent', 'Superintendent'), ('Other', 'Other')], max_length=30, verbose_name='Role')),
                ('club_contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='clubs.ClubContact', verbose_name='Club Contact')),
            ],
        ),
        migrations.AddField(
            model_name='clubcontact',
            name='contact',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contact_to_club', to='clubs.Contact', verbose_name='Contact'),
        ),
        migrations.AddField(
            model_name='clubcontact',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='club',
            name='contacts',
            field=models.ManyToManyField(through='clubs.ClubContact', to='clubs.Contact', verbose_name='Contacts'),
        ),
        migrations.AddField(
            model_name='club',
            name='golf_course',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='clubs.GolfCourse', verbose_name='Home Course'),
        ),
    ]
